// Node.hpp

// Class for quadtree used with A* algorithm v0.1.1

#ifndef NODE
#define NODE

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <vector>
#include <functional>
#include <array>
#include <list>

enum Node_type {BLOCKED_NODE, MIXED_NODE, FREE_NODE, GOAL_NODE, UNDECIDED_NODE};

Node(int x, int y, int resolution, Node* parent_node, Node_type type, std::array<Node*, 4> sons, std::list<Node*> neighborhood){
	    this->x = x;
	    this->y = y;
	    this->resolution = resolution;
	    this->parent_node = parent_node;
	    this->type = type;
	    this->sons = sons;
	    this->neighborhood = neighborhood;
	    
	    
	    //Default values :
	    this->weight_so_far=INT_MAX;
	    this->coming_from=NULL;
	}
	
	int heuristique(Node* goal){
	    return abs(this->x - goal->x) + abs(this->y - goal->y); //Distance de manhattan
	}
	
	bool isLeaf(){
	    //return sons[0]==NULL && sons[1]==NULL && sons[2]==NULL && sons[3]==NULL;
	    return type==FREE_NODE;
	}
	
	bool isRoot(){
	    return parent_node == NULL;
	}
	
	bool isGoal(){
	    return type==GOAL_NODE;
	}
};
#endif
